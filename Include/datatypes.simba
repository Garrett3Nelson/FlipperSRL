(*
tTradeRecord Functions
-------------------
*)

(*
CreateTradeRecord
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   function createTradeRecord(time, amount : Int32) : tTradeRecord;
Used to convert integer values to tTradeRecord format for use in tracking
*)

function tGEOffer.createTradeRecord(history : tGEHistory) : tTradeRecord;
begin
  with Result do
  begin
    offerID := self.globalID;
    timeStampUnix := getSystemUnix();
    timeStamp := FormatDateTime('yyyy-mm-dd hh:mm:ss', Now());
    itemName := self.item.name;
    itemID := self.item.itemID;
    OfferType := history.OfferType;
    Quantity := history.Quantity;
    PricePerItem := history.PricePerItem;
    TotalPrice := history.TotalPrice;
  end;
end;

function tTradeRecord.stringify() : String;
begin
  result := self.OfferType + ': Quantity = ' + toStr(self.Quantity) + ', Price = ' + toStr(self.TotalPrice) + ' (' + toStr(self.PricePerItem) +' ea), Recorded at ' + toStr(self.TimeStamp);
end;

(*
tTradeRecordArray.Append
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   procedure tTradeRecordArray.append(const trade : tTradeRecord);
Appends a trade record to the end of the array
*)

procedure tTradeRecordArray.append(constref trade : tTradeRecord);
begin
  insert(trade, self, length(self));
end;

procedure tTradeRecordArray.updatePriceCheck(offer : tGEOffer);
var i, matches : Int32;
begin
  for i := high(self) downto 0 do
  begin
    if (self[i].OfferID = -1) and (self[i].itemID = offer.item.itemID) then
    begin
      self[i].OfferID := offer.globalID;
      matches += 1;
    end;

    if matches = 2 then exit;
  end;
end;

(*
tTradeRecordArray.deleteIndex
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   procedure tTradeRecordArray.deleteIndex(const index : Integer);
Deletes a trade record from the list (after it is past 4 hours)
*)

procedure tTradeRecordArray.deleteIndex(const index : Integer);
begin
  if not inRange(index, low(self), high(self)) then
  begin
    //tScript.print('ERROR: deleteIndex: index out of bounds.');
    exit();
  end;

  delete(self, index, 1);
end;

(*
tGEItemArray.Append
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   procedure tGEItemArray.append(const item : tGEItem);
Appends an item to the end of the array
*)

procedure tGEItemArray.append(constref item : tGEItem);
begin
  insert(item, self, length(self));
end;

(*
tGEItemArray.deleteIndex
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   procedure tGEItemArray.deleteIndex(const index : Integer);
Deletes an item from the array, used for clearing return items
*)

procedure tGEItemArray.deleteIndex(const index : Integer);
begin
  if not inRange(index, low(self), high(self)) then
  begin
    //tScript.print('ERROR: deleteIndex: index out of bounds.');
    exit();
  end;

  delete(self, index, 1);
end;

 (*
tGEItem Functions
-------------------
*)


(*
tGEItem.initFlip
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   procedure tGEItem.initFlip();
Once the pricecheck is complete, the flip is set up so that we sell at the
auto-buy price and buy at the auto-sell price.
*)

procedure tGEItem.initFlip();
var
  temp_buy, temp_sell : Integer;
begin
  if self.buy < self.sell then // if buy is lower that means we've already set up the price
    //tScript.print("Item was set up for flipping already")
  else begin
    temp_buy := min(self.sell, self.buy) + 1; // The low price is for buying
    temp_sell := max(self.sell, self.buy) - 1; // The high price is for selling
    self.buy := temp_buy;
    self.sell := temp_sell;
  end;
end;

(*
tGEItem.margin
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   function tGEOffer.margin() : Extended;
Calculates the margin possible for the item. Used after pricechecking.
*)

function tGEItem.margin() : Extended;
begin
  if min(self.buy, self.sell) = 0 then
    Result := 0.0
  else if (self.buy > self.sell) then // If the item is set for a pricecheck
    Result := 100*(self.buy - self.sell - 2 - self.tax) / self.sell
  else if (self.sell > self.buy) then // If the item is set for a flip (doesn't need -2 because it's already happened)
    Result := 100*(self.sell - self.buy - self.tax) / self.buy;
    // The min/max are used to ensure we calculate the right method (higher - lower)/lower
    // margin := (revenue-spend-2)/spend
    // The 2 is subtracted because when we set up for flip we're going to reduce by 1gp on each side
    // Which gives us the best offer on the GE and a faster flip.
end;

function tGEItem.stringify() : String;
begin
  result := self.name + ": ID = " + toStr(self.itemID) + ", Market = " + toStr(self.market) + ", Buy = " + toStr(self.buy) + ", Sell = " +toStr(self.sell) + ', Margin = ' + toStr(round(self.margin(), 3)) + ", Tax: " + toStr(self.tax) + ", Limit: " + toStr(self.limit);
end;

(*
tGEItem.debug
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   function tGEItem.debug() : String;
Puts the important info about an item into a nice readable string. It reports
itemID, name, market, buy/sell, margin, and limit.
*)

procedure tGEItem.debug();
begin
  print(self.stringify());
end;

 (*
tGEOffer Functions
-------------------
*)

(*
tGEOffer.initTime
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   procedure tGEOffer.initTime();
Used to mark the startTime of the offer. Reset() will set to 0 so it needs to be
set when the offer actually starts.
*)

procedure tGEOffer.initTime();
begin
  self.startTime := getSystemUnix();
  self.lastUpdate := self.startTime; // At the beginning these are the same
end;

(*
tGEOffer.updateTrades
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   procedure tGEOffer.updateTrades();
Removes any trade records that are over 4 hours old, to update the limit calculation.
*)

//procedure tGEOffer.updateTrades();
//var
//  cutoff, lim, i : Integer;
//begin
//  cutoff := getSystemUnix() - (4*60*60); // 4 hour cutoff for trades
//
//  lim := high(self.previousTrades);
//
//  for i := lim downto 0 do
//    if self.previousTrades[i].tradeFinished < cutoff then // if it's been longer than 4 hours
//      self.previousTrades.deleteIndex(i);
//end;

(*
tGEOffer.addTrade
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   procedure tGEOffer.addTrade(trade : tTradeRecord);
Adds a trade record to the offer for tracking.
*)

//procedure tGEOffer.addTrade(constref trade : tTradeRecord);
//begin
//  if trade.amount <= 0 then
//    writeln("ERROR: Cannot add trade of 0 amount")
//  else
//    self.previousTrades.append(trade);
//
//  self.updateTrades(); // After appending, check to see if any old records can be removed
//end;

(*
tGEOffer.countTraded
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   function tGEOffer.countTraded() : Integer
Sums up the amount we've traded so far. The next partial offer will be calculated
as limit - countTraded.
*)

//function tGEOffer.countTraded() : Integer;
//var
//  i, lim : Integer;
//begin
//  self.updateTrades(); // Before we count, get rid of any old trades
//  lim := high(self.previousTrades);
//  for i := 0 to lim do
//    Result += self.previousTrades[i].amount
//
//end;

(*
tGESlot.debug
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   function tScript.debug() : String;
Puts the important info about a slot into a nice readable string. It reports
slot number, status, last progress.
*)

procedure tGESlot.debug();
begin
  print(toStr(self));
end;

function tGEOffer.stringify(collected : Boolean = True; full: Boolean = False) : String;
begin
  if full then
    result := 'Offer: ' + toStr(self.globalID) + '. Status = ' + self.status + '. slotNumber = ' + toStr(self.slotNumber) + '. toTrade = ' + toStr(self.toTrade) + '. Purchased = ' + toStr(self.purchased) + '. Spent: ' + toStr(self.spent) + '. Revenue: ' + toStr(self.revenue) + '. Profit: ' + toStr(self.revenue-self.spent) + '. Time: ' + toStr(round((getSystemUnix() - self.startTime)/1000)) + 's'
  else
    result := 'Offer: ' + toStr(self.globalID) + '. Status = ' + self.status + '. slotNumber = ' + toStr(self.slotNumber) + '. toTrade = ' + toStr(self.toTrade) + '. Purchased = ' + toStr(self.purchased) + '. Spent: ' + toStr(self.spent) + '. Revenue: ' + toStr(self.revenue);
  if collected then
    result += '. Collected: ' + toStr(self.collected) +'. History Updated: ' + toStr(self.HistUpdated);

end;

(*
tGEOffer.debug
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   procedure tGEOffer.debug();
Puts the important info about an offer into a nice readable string. It reports
tradeID, status, toTrade, and purchased.
*)

procedure tGEOffer.debug();
begin
  print(self.stringify());
  self.item.debug();
  self.slot.debug();
end;

(*
tGEOfferArray.debug
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   procedure tGEOfferArray.debug();
Debugs all offers.
*)

procedure tGEOfferArray.debug();
var
  i, lim : Int32;
begin
  lim := high(self);
  for i := 0 to lim do
    if self[i].status <> 'empty' then
      self[i].debug();
end;

procedure tGEOfferArray.append(constref offer : tGEOffer);
begin
  insert(offer, self, length(self));
end;

(*
tGEOfferArray.countCollected
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   function tGEOfferArray.countCollected();
Counts how many offers are marked collected internally.
*)

function tGEOfferArray.countCollected() : Integer;
var
  i, lim : Int32;
begin
  lim := high(self);
  for i := 0 to lim do
    if self[i].collected then inc(result);
end;

(*
tGEOfferArray.countCollected
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   function tGEOfferArray.countActive();
Counts how many active offers we think we have.
*)

function tGEOfferArray.countActive() : Integer;
var i : Integer;
begin
  for i := 0 to high(self) do
    if ((self[i].globalID > 0) and (self[i].status <> 'empty')) then
      result += 1;
end;

// Returns a tIA of the trading slot numbers
function tGEOfferArray.CountTrading() : tIntegerArray;
var
  i : Integer;
begin
  for i := 0 to high(self) do
    if ((self[i].slot.OfferType <> ERSGEOfferType.EMPTY) and (self[i].slot.OfferType <> ERSGEOfferType.UNKNOWN)) then result.append(self[i].slotNumber);
end;

function tGEOfferArray.CountComplete() : tIntegerArray;
var
  i : Integer;
begin
  for i := 0 to high(self) do
    if (self[i].slot.Progress = 100) then result.append(self[i].slotNumber);
end;



 (*
tGESlot Functions
-------------------
*)

procedure tGESlot.Update(slot : TRSGEOfferStatus);
begin
  with self do
  begin
    OfferType     := slot.OfferType;
    Item          := slot.Item;
    Quantity      := slot.Quantity;;
    PricePerItem  := slot.PricePerItem;
    TotalPrice    := slot.TotalPrice;
    Progress      := slot.Progress;
  end;
end;

(*
tGEOffer.updateSlot
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   procedure tGESlot.update();
Updates the slot from mainscreen information.
*)

procedure tGEOffer.updateSlot();
begin
  if self.slotNumber > -1 then
    self.slot.update(grandExchange.GetOfferStatus(self.slotNumber));
end;

procedure tGEOfferArray.updateSlots();
var i : Int32;
begin
  for i := 0 to high(self) do
    self[i].updateSlot();
end;

function tGEHistory.stringify() : String;
begin
  result := self.offerType + ': ' + self.Item + '. Value: ' + toStr(self.TotalPrice) + '. Quantity: ' + toStr(self.Quantity) + '. Each:  ' + toStr(self.PricePerItem) + '. Used = ' + toStr(self.isUsed) + '. firstPass = ' + toStr(self.firstPass);
end;

procedure tGEHistory.debug();
begin
  print(self.stringify());
end;

procedure tGEHistoryArray.debug();
var
  i, lim : Integer;
begin
  lim := high(self);
  for i := 0 to lim do
    self[i].debug();
end;

(*
tGEHistoryArray.Append
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   procedure tGEHistoryArray.append(const history : tGEHistory);
Appends a history record to the end of the array
*)

procedure tGEHistoryArray.append(constref history : tGEHistory);
begin
  insert(history, self, length(self));
end;

(*
tGEHistoryArray.deleteIndex
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   procedure tGEHistoryArray.deleteIndex(const index : Integer);
Deletes a history record from the list - after collecting new items
*)

procedure tGEHistoryArray.deleteIndex(const index : Integer);
begin
  if not inRange(index, low(self), high(self)) then
  begin
    //tScript.print('ERROR: deleteIndex: index out of bounds.');
    exit();
  end;

  delete(self, index, 1);
end;

procedure tGEHistoryArray.trimUsed();
var
  i, usedCount, deleteTo : Int32;
begin
  for i := 0 to high(self) do
  begin
    if usedCount = 2 then
    begin
      deleteTo := i;
      break;
    end;

    if self[i].isUsed then usedCount += 1;
  end;

  //writeln('DeleteTo: ', deleteTo);

  for i := high(self) downto max(deleteTo, 5) do
    if self[i].isUsed or self[i].firstPass then self.deleteIndex(i);

  // A hacky way of removing lost (unused) items from failed buys
  for i := high(self) downto 5 do
    if (not self[i].isUsed) and (not self[i].firstPass) then self[i].firstPass := True;
end;

function tGEHistory.equals(cmp : tGEHistory) : Boolean;
begin
  result := True;

  if not smartStringMatch(self.Item, cmp.Item, 2) then exit(False);
  if self.OfferType <> cmp.OfferType then exit(False);
  if self.Quantity <> cmp.Quantity then exit(False);
  if self.TotalPrice <> cmp.TotalPrice then exit(False);
  if self.PricePerItem <> cmp.PricePerItem then exit(False);
end;

function tGEHistoryArray.matchLine(constref history : tGEHistory; startLine, endLine : Integer) : Integer;
var
  i, lim : Integer;
begin
  result := -1;

  lim := high(self);
  for i := max(0, startLine) to min(lim, endLine) do
    if self[i].equals(history) then
    begin
      //writeln('Matched ' + history.Item + ' with ' + self[i].Item);
      //writeln('Matched on line ', i);
      exit(i);
    end;
end;

function tGEHistoryArray.matches(cmp: tGEHistoryArray): Boolean;
var
  i : Int32;
  smaller, bigger: tGEHistoryArray;
begin
  if length(self) >= length(cmp) then
  begin
    bigger := copy(self, 0, length(self));
    smaller := copy(cmp, 0, length(cmp));
  end else
  begin
    bigger := copy(cmp, 0, length(cmp));
    smaller := copy(self, 0, length(self));
  end;

  //writeln('Bigger');
  //bigger.debug();
  //writeln('Samller');
  //smaller.debug();

  // The line must match the top of oldHist or else it's not a match ever

  result := True;
  for i := 0 to high(smaller) do
    if not bigger[i].equals(smaller[i]) then
    begin
      //writeln(bigger[i].Item, ' does not equal ', smaller[i].Item);
      exit(False);
    end;
end;

(*
tGEHistoryArray.match
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   function tGEHistoryArray.match(NewHist : tGEHistoryArray) : Integer;
Matches the new history array (NewHist) to the previous history and returns the
index where the match was found. Keeps the old array status (isUsed).
*)
function tGEHistoryArray.match(NewHist : tGEHistoryArray) : Integer;
var
  testHist : tGEHistoryArray;
  i : Integer;
begin
  result := -1;
  if length(self) = 0 then
  begin
    self := NewHist;
    exit(0);
  end;

  for i := 0 to high(newHist) do
  begin
    testHist := copy(newHist, i, (length(NewHist) - i));
    //writeln('Test ', i);
    //testHist.debug();
    if self.matches(testHist) then
    begin
      //writeln('Found match of length ', length(testHist));
      result := length(newHist) - length(testHist);
      break;
    end;
  end;

  //lastMatch := self.matchLine(newHist[high(NewHist)]);
  //result := high(newHist) - lastMatch;

  // If they matched from the first line, no update required
  if result = 0 then exit();

  //writeln('result: ', result);
  if (result > -1) then
    // Delete duplicates
    for i := high(newHist) downto result do
      newHist.deleteIndex(i);

  // Insert remaining at the top
  insert(newHist, self, 0);

  // Removes excess (more than 2) history items that are already logged.
  self.trimUsed();
end;

procedure tGEHistoryArray.Update();

  function CastHist(hist: tRSGEHistory) : tGEHistoryArray;
  var
    tCast : tGEHistory;
    lineItem : TRSGEHistoryItem;
  begin
    for lineItem in hist do
    begin
      with tCast do
      begin
        tCast.OfferType := lineItem.OfferType;
        tCast.Item:= lineItem.Item;
        tCast.Quantity:= lineItem.Quantity;
        tCast.PricePerItem:= lineItem.PricePerItem;
        tCast.TotalPrice:= lineItem.TotalPrice;
        tCast.PreTax:= lineItem.PreTax;
        tCast.Bounds:= lineItem.Bounds;
        tCast.isUsed:= False;
      end;

      result.append(tCast);
    end;
  end;

var
  newHistory : tGEHistoryArray;
  firstPass : Boolean;
  i : Int32;
begin
  grandExchange.changeTab();  // Change to History tab
  wait(random(400,800));

  firstPass := length(self) = 0;

  setLength(newHistory, 0);

  newHistory := CastHist(GrandExchange.GetHistory());
  if length(newHistory) = 0 then
  begin
    GrandExchange.ChangeTab();

    newHistory := CastHist(GrandExchange.GetHistory());
    if length(newHistory) = 0 then
      print('History.Update: Failed to read history', eDebugType.FATAL);
  end;

  if length(newHistory) > 5 then
    if newHistory[5].OfferType = '' then newHistory.deleteIndex(5);

  grandExchange.changeTab(False);
  wait(random(400,800));

  print('New History Debug');
  newHistory.debug();

  print('Old History Debug');
  self.debug();

  self.match(newHistory);

  if firstPass then
    for i := 0 to high(self) do
      self[i].firstPass := True;

  print('Post-Match Debug');
  self.debug();
end;



// Count how many slots have active offers
function tScript.countActiveSlots() : Int32;
var
  i : Int32;
  slot : TRSGEOfferStatus;
begin
  for i := 0 to 7 do
  begin
    slot := grandExchange.GetOfferStatus(i);
    if slot.OfferType <> ERSGEOfferType.UNKNOWN then Result += 1;
  end;
end;

// Count how many slots are empty
function tScript.countFreeSlots() : Int32;
var
  i : Int32;
  slot : TRSGEOfferStatus;
begin
  for i := 0 to 7 do
  begin
    slot := grandExchange.GetOfferStatus(i);
    if slot.OfferType = ERSGEOfferType.EMPTY then Result += 1;
  end;
end;

procedure tScript.OverRideItems();
var
  bmp : Array of tMufasaBitmap;
  items : tStringArray;
  item : String;
  sourcePath : String = {$macro CURRENT_DIRECTORY};
  i, j : Int32;
begin
  SourcePath := SourcePath.Before(DirectorySeparator + 'Include') + DirectorySeparator + 'ItemOverride' + DirectorySeparator;

  items := GetFiles(SourcePath, 'png');

  if length(items) = 0 then exit();
  SetLength(bmp, length(items));

  for item in items do
  begin
    item := item.before('.png');

    bmp[i].Init(Client.GetMBitmaps());
    bmp[i].LoadFromFile(SourcePath + item + '.png');
    bmp[i].setName(Item);
    bmp[i].ReplaceColor(RS_ITEM_SHADOW, 0);

    try
      itemFinder.getItemImages(Item);

      for j := 0 to High(itemFinder.ItemImages) do
        if (itemFinder.ItemImages[j].Name = Item) then
        begin
          itemFinder.ItemImages[j].Images += bmp[i];
          break();
        end;
    except
    end;
  end;
end;

(*
tScript.addTrade
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   procedure tScript.addTrade(trade : tTradeRecord);
Adds a given tradeRecord to the recentItem list.
*)

procedure tScript.addTrade(offerIndex, historyIndex : Int32);
var trade : tTradeRecord;
begin
  trade := self.offers[OfferIndex].createTradeRecord(self.history[historyIndex]);

  if trade.Quantity <= 0 then
    print("ERROR: Cannot add trade of 0 amount")
  else
    self.tradeLog.append(trade);
end;

function tScript.countTraded(itemID : Int32) : Integer;
var
  i, lim : Integer;
begin
  lim := high(self.tradeLog);
  for i := lim downto 0 do
  begin
    // Working from newest (last) to oldest (first)
    // Can break the first time it's over 4hrs because they're entered chronologically
    if (getSystemUnix - self.tradeLog[i].timeStampUnix) > (4 * ONE_HOUR) then break();

    if (self.tradeLog[i].OfferType = 'Buy') and (self.tradeLog[i].itemID = itemID) then
      Result += self.tradeLog[i].Quantity;
  end;
end;


function tScript.CashAllowable() : Int32;
begin
  result := round((0.95 * self.playerCash) / self.countFreeSlots());
end;

(*
tGEItem.reset
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   procedure tGEItem.reset();
Resets all the variables to default. Can be used for initializing the item.
*)

procedure tGEItem.reset();
begin
  self.itemID := 0;
  self.name := "";
  self.market := 0;
  self.limit := 0;
  self.buy := 0;
  self.sell := 0;
end;

(*
tGESlot.reset
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   procedure tGESlot.reset();
Resets all the variables to default. Also resets the offer data for the slot.
*)

procedure tGESlot.reset();
begin
  self.OfferType := ERSGEOfferType.EMPTY;
  self.Item := '';
  self.Quantity := 0;
  self.PricePerItem := 0;
  self.TotalPrice := 0;
  self.Progress := 0;
  self.lastProgress := 0;
end;

(*
tGEOffer.reset
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   procedure tGEOffer.reset();
Resets all the variables to default. Can be used for initializing the offer. Also
resets the item inside the offer.
*)

procedure tGEOffer.reset(defaultWait: Int32);
begin
  self.globalID := -1;
  self.purchased := 0;
  self.toTrade := 0;
  self.buyOverride := False;
  self.abandoning := False;
  self.spent := 0;
  self.revenue := 0;
  self.startTime := 0;
  self.lastUpdate := 0;
  self.slotNumber := -1;
  self.waitTime := defaultWait;
  self.status := "empty";
  self.collected := False;
  self.histUpdated := False;
  self.item.reset();
  self.slot.reset();
end;

(*
tGEOfferArray.reset
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
   procedure tGEOfferArray.reset();
Resets all data in all slots.
*)

procedure tGEOfferArray.reset(defaultWait : Int32);
var
  i, lim : Int32;
begin
  lim := high(self);
  for i := 0 to lim do
    self[i].reset(defaultWait);
end;

procedure tScript.setup(defaultWait : Int32 = 0);
begin
  setLength(self.offers, 8);
  self.offers.reset(defaultWait);
  logTimer.Init(ONE_SECOND * random(150, 200));

  setLength(self.history, 0);
  setLength(self.itemQ, 0);
  setLength(self.tradeLog, 0);
  setLength(self.inv, 28);
end;

procedure tScript.init();
var f : Int32;
begin
  if not DirectoryExists({$MACRO CURRENT_DIRECTORY} + 'TradeLogs') then
    CreateDirectory({$MACRO CURRENT_DIRECTORY} + 'TradeLogs');

  if not fileExists({$MACRO CURRENT_DIRECTORY} + 'TradeLogs' + DirectorySeparator + 'log.txt') then
  begin
    f := createFile({$MACRO CURRENT_DIRECTORY} + 'TradeLogs' + DirectorySeparator + 'log.txt');
    closeFile(f);
  end;

  WriteFileContents({$MACRO CURRENT_DIRECTORY} + 'TradeLogs' + DirectorySeparator + 'log.txt', FormatDateTime('yyyy-mm-dd hh:mm:ss', Now()) + ' - Script Start' + STR_NEW_LINE + STR_NEW_LINE, True);
end;

//procedure tScript.initRecorder();
//begin
//  if not DirectoryExists({$MACRO CURRENT_DIRECTORY} + 'Video') then
//    CreateDirectory({$MACRO CURRENT_DIRECTORY} + 'Video');
//
//  Recorder.Start(GetSimbaTargetWindow(), 30, {$MACRO CURRENT_DIRECTORY} + 'Video')
//end;

procedure TScript.saveTrade(offerIndex : Int32);
var i : Int32;
begin
  WriteFileContents({$MACRO CURRENT_DIRECTORY} + 'TradeLogs' + DirectorySeparator + 'log.txt', self.offers[OfferIndex].stringify(False, True) + STR_NEW_LINE, True);
  WriteFileContents({$MACRO CURRENT_DIRECTORY} + 'TradeLogs' + DirectorySeparator + 'log.txt', self.offers[OfferIndex].item.stringify() + STR_NEW_LINE, True);

  if self.offers[OfferIndex].globalID > -1 then
    for i := 0 to high(self.tradeLog) do
      if self.tradeLog[i].offerID = self.offers[OfferIndex].globalID then
        WriteFileContents({$MACRO CURRENT_DIRECTORY} + 'TradeLogs' + DirectorySeparator + 'log.txt', '    ' + self.tradeLog[i].stringify() + STR_NEW_LINE, True);
end;

procedure TScript.Free();
begin
  try
    RSClient.Image.Clear();
    self.itemMap.Free();
    WriteFileContents({$MACRO CURRENT_DIRECTORY} + 'TradeLogs' + DirectorySeparator + 'log.txt', STR_NEW_LINE + STR_NEW_LINE + FormatDateTime('yyyy-mm-dd hh:mm:ss', Now()) + ' - Script End' + STR_NEW_LINE, True);
  except
    Print('Couldnt Free Safely');
  end;

  Print('Did ' + toStr(length(self.CompleteOffers)) + ' trades', eDebugType.LIGHT);
  Print('Spent ' + toStr(self.totalSpend) + ' and made ' + toStr(self.totalRevenue) + ' revenue', eDebugType.LIGHT);
  Print('Start Cash: ' + toStr(self.starterCash) + ', Current Cash: ' + toStr(self.playerCash));
  Print('Cash change of: ' + toStr(self.playerCash - self.starterCash));
  Print('A total profit of: ' + toStr(self.totalRevenue - self.totalSpend) + 'gp', eDebugType.LIGHT);
  Print('Blacklist for next time: ' + toStr(self.itemBlackList), eDebugType.LIGHT);

  Print('You did great out there', eDebugType.LIGHT);
end;

