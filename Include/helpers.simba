function getSystemUnix() : Int64;
begin
  result := 1000 * dateTimetoUnix(NowUTC(), True); // Unix is in seconds by default, change to ms to match all SRL functions
end;

procedure createTradeLogFile();
var f : Int32;
begin
  if not DirectoryExists({$MACRO CURRENT_DIRECTORY} + 'TradeLogs') then
    CreateDirectory({$MACRO CURRENT_DIRECTORY} + 'TradeLogs');

  bot.TradeLogFile := {$MACRO CURRENT_DIRECTORY} + 'TradeLogs' + DirectorySeparator + FormatDateTime('yyyymmdd_hhmmss', Now()) + '_log.txt';
  if not fileExists(bot.TradeLogFile) then
  begin
    f := CreateFile(bot.TradeLogFile);
    closeFile(f);
  end;
end;

procedure createLogFile();
var f : Int32;
begin
  if not DirectoryExists({$MACRO CURRENT_DIRECTORY} + 'Logs') then
    CreateDirectory({$MACRO CURRENT_DIRECTORY} + 'Logs');

  bot.LogFile := {$MACRO CURRENT_DIRECTORY} + 'Logs' + DirectorySeparator + FormatDateTime('yyyymmdd_hhmmss', Now()) + '_log.txt';
  if not fileExists(bot.LogFile) then
  begin
    f := CreateFile(bot.LogFile);
    closeFile(f);
  end;
end;

procedure print(txt: String; toOutput, toFile : Boolean);
begin
  if toFile and (bot.LogFile = '') then
    createLogFile();

  if toFile then
  begin
    try
      writeFileContents(bot.LogFile, txt + STR_NEW_LINE, True);
    except
      writeln('ERROR: Cannot save to log file');
    finally
    end;
  end;

  if toOutput then
    writeln(txt);
end;

procedure print(txt: String; level: eDebugType); overload;
begin
  if (level = eDebugType.FATAL) then
  begin
    print(SRL.TimeStamp() + ' [FATAL]: ' + txt, True, (bot.DebugLevel = eDebugType.SAVE));
    terminateScript();
  end;

  if bot.debugLevel = eDebugType.NONE then exit();

  if bot.debugLevel = eDebugType.SAVE then
  begin
    case level of
      eDebugType.DEV: print(SRL.TimeStamp() + ' [DEV]: ' + txt, False, True);
      eDebugType.LIGHT: print(SRL.TimeStamp() + ' [LIGHT]: ' + txt, True, True);
    end;

    exit();
  end else
    case bot.debugLevel of
      eDebugType.DEV: print(SRL.TimeStamp() + ' [DEV]: ' + txt, True, False);
      eDebugType.LIGHT: if (level = eDebugType.LIGHT) then print(SRL.TimeStamp() + ' [LIGHT]: ' + txt, True, False);
    end;
end;

procedure TSRLBaseRecord.DebugLn(text: String); constref; override;
begin
    print(SRL.TimeStamp() + ':[' + Self.Name + ']: ' + text, True, (bot.DebugLevel = eDebugType.SAVE));
end;

procedure takeScreenshot(fileName: string);
begin
  CreateDirectory({$MACRO CURRENT_DIRECTORY} + 'Screenshots' + DirectorySeparator);
  saveScreenshot({$MACRO CURRENT_DIRECTORY} + 'Screenshots' + DirectorySeparator + FormatDateTime('yymmdd_hhmmss', Now()) + '_' + fileName);
end;

function smartStringMatch(source, target: String) : Extended;
  function trimBad(text, omit : String) : String;
  var
    bad : String = "'.,-<>?+=()/\*@![]#_:"+#10+#13+#32;
    c : String;
  begin
    result := text;
    for c in bad do
    begin
      //writeln(c);
      if pos(c, omit) > 0 then continue;
      result := replace(result, c, '', [rfReplaceAll]);
    end;
  end;

begin
  source := trimBad(source, target);
  source := trim(replace(source, ' ', '', [rfReplaceAll]));
  target := trim(replace(target, ' ', '', [rfReplaceAll]));

  result := stringMatch(source, target);
end;

function smartStringMatch(source, target : String; diff : Integer) : Boolean; overload;
var
  strLen : Integer;
  matchDiff, allowable : Extended;
  trimLong, trimShort : String;
begin
  source := trim(replace(source, ' ', '', [rfReplaceAll]));
  target := trim(replace(target, ' ', '', [rfReplaceAll]));

  if length(target) >= length(source) then
  begin
    trimLong := target;
    trimShort := source;
  end else
  begin
    trimLong := source;
    trimShort := target;
  end;

  strLen := length(trimLong);
  if strLen <= diff then
  begin
    print('WARNING: SmartStringMatch - Diff is bigger than the length of the string to match', eDebugType.DEV);
    print('Target: ' + target, eDebugType.DEV);
    print('Source: ' + Source, eDebugType.DEV);
  end;

  allowable :=  max(1.0 - (diff / strLen), 0.5);

  matchDiff := smartStringMatch(source,target);

  result := matchDiff >= allowable;
end;

function checkBlackList(name : String; blackList : tStringArray) : Boolean;
var i : Int32;
begin
  name := lowercase(name);
  if isStrInArr(name, False, blackList) then exit(True);

  for i := 0 to high(blackList) do
  begin
    if pos("*", blackList[i]) then
    begin
      if length(blackList[i].Before("*")) > 0 then
        result := pos(blackList[i].Before("*"), name) > 0
      else
        result := pos(blackList[i].After("*"), name) > 0;
    end;

    if result then exit();
  end;
end;

function getIncludeHash() : String;
var
  files : tStringArray;
  f, contents : String;
begin
  files := getFiles({$MACRO CURRENT_DIRECTORY}, 'simba');
  for f in files do
    contents += readFileContents({$MACRO CURRENT_DIRECTORY} + f);

  result := SHA1String(contents);
end;

procedure SaveItemMap(ItemMap: tItemMapArray);
var
  Map : tItemMap;
  StringA, MapLine : tStringArray;
  f : Int32;
begin
  if not FileExists({$MACRO CURRENT_DIRECTORY} + 'map.csv') then
  begin
    f := CreateFile({$MACRO CURRENT_DIRECTORY} + 'map.csv');
    CloseFile(f);
  end;
  MapLine := ['ID', 'Limit', 'Name', 'AvgLow', 'AvgHigh', 'HighVol', 'LowVol', 'VolumeFactor', 'PercentTradeable', 'Tradeable', 'Value'];
  StringA.Append(MapLine.Merge(','));

  for Map in ItemMap do
  begin
    MapLine := [toStr(Map.ID), toStr(Map.Limit), Map.Name, toStr(map.AvgLow), toStr(map.AvgHigh), toStr(map.HighVol), toStr(map.LowVol), toStr(map.VolumeFactor), toStr(map.PercentTradeable), toStr(map.Tradeable), toStr(map.Value)];
    StringA.Append(MapLine.Merge(','));
  end;

  WriteFileContents({$MACRO CURRENT_DIRECTORY} + 'map.csv', StringA.Merge(STR_NEW_LINE) , False);
end;

procedure SaveCroppedBitmap(fileName : String; cropBox : tBox);
var
  mbmp : tMufasaBitmap;
begin
  mbmp.FromClient([cropBox.X1, cropBox.Y1, cropBox.X2, cropBox.Y2]);
  mbmp.SaveToFile(fileName);
  mbmp.Free();
end;

function tRSGrandExchange.GetInterfaceBoxes() : tBoxArray;
var
  buttons : tRSButtonArray;
  i : Int32;
begin
  case self.GetCurrentInterface() of
    ERSGEInterface.OVERVIEW:
    begin
      buttons := self.GetOverviewButtons();
      for i := 0 to 7 do
        if self.GetOfferStatus(i).OfferType = ERSGEOfferType.EMPTY then
          buttons += self.GetOfferCreateButtons(i);
    end;
    ERSGEInterface.OFFER_STATUS:
      buttons := self.GetOfferStatusButtons();
    ERSGEInterface.OFFER_SETUP:
      buttons := self.GetSetupOfferButtons();
  end;

  if length(buttons) = 0 then exit();
  for i := 0 to high(buttons) do
    result.append(buttons[i].Bounds);
end;

procedure tRSGrandExchange.DebugInterface(fileName : String);
var
  mBitmap : tMufasaBitmap;
  ATPA : T2DPointArray;
  tBoxes : tBoxArray;
  i : Int32;
begin
  mBitmap.FromClient();

  tBoxes := self.GetInterfaceBoxes();
  SetLength(ATPA, Length(tBoxes));
  for I := 0 to High(ATPA) do
    ATPA[I] := EdgeFromBox(tBoxes[I]);

  for I := 0 to High(ATPA) do
    mBitmap.DrawTPA(ATPA[I], DEBUG_COLORS[I mod Length(DEBUG_COLORS)]);

  mBitmap.SaveToFile({$MACRO CURRENT_DIRECTORY} + 'Screenshots' + DirectorySeparator + FormatDateTime('yymmdd_hhmmss', Now()) + '_' + fileName);
  mBitmap.Free();
end;


// Helper function for finding the new OSRS Window after RemoteInput pairs
// Example: NewWindow := FindRSWindow(GetSimbaTargetPID());
function FindRSWindow(targetPID : Int32 = -1) : tOSWindow;
var
  Root, Child: TOSWindow;
  windowBox : tBox;
  windowWidth, curWidth : Integer;
begin
  for Root in GetVisibleWindows() do
  begin
    // The PID doesn't change after RemoteInput pairs
    if (targetPID > 0) and (targetPID <> Root.GetPID()) then continue;

    // Only works for vanilla client with this filter
    if (Root.GetTitle() = 'Old School RuneScape') then
    begin
      {$IFDEF WINDOWS}
      for Child in Root.GetChildren() do
        if (Child.GetClassName() = 'SunAwtCanvas') then
        begin
          if Child = GetSimbaTargetWindow() then exit(child);

          // get size of this child window
          windowBox := Child.GetBounds();

          // The main RS window is the narrowest
          windowWidth := windowBox.X2 - windowBox.X1;

          if (windowWidth < curWidth) or (curWidth = 0) then
          begin
            curWidth := windowWidth;
            result := Child;
          end;
        end;
      {$ELSE}
      begin
        // Handle linux later
        exit();
      end;
      {$ENDIF}
    end;
  end;
end;

procedure Recorder.Start(seconds: Integer; directory: String; userBox, expBox: TBox = []); static; override;
begin
  Recorder.Start(FindRSWindow(getSimbaTargetPID()), seconds, directory, userBox, expBox);
end;

procedure tScript.SetupRecorder();
var
  userB, expB: TBox;
begin
  userB := Chat.GetDisplayNameBox();
  if userB = Chat.GetLineBoxes()[CHAT_INPUT_LINE] then
    userB := [];

  XPBar._Setup();
  if XPBar.isSetup then
    expB := XPBar.Bounds()
  else
  begin
    print('Could not find XPBar, guessing location for video blocking', eDebugType.DEV);
    expB := [MainScreen.Bounds().Middle.X, 0, MainScreen.Bounds().X2, 25];
  end;

  Recorder.Start(30, {$MACRO CURRENT_DIRECTORY} + 'Video', userB, expB);
end;

