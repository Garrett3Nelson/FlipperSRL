(*
Types and Variables
-------------------
*)

(*
type tGEItem
~~~~~~~~~~~~~~~~~~
.. pascal::
   tGEItem = record
     name : String; // The item name as it appears in the GrandExchange
     itemID : Int32; // The itemID as it appears in the GE Database
     limit : Int32; // Trade Limit per 4 hours
     market : Int32; // Current market price
     buy : Int32; // Price we're putting for a buy offer
     sell : Int32; // Price we're putting for a sell offer
   end;
This is used for tracking item information through offers
*)




type tGEItem = record
  name : String;
  itemID, limit, market, buy, sell : Int32;
  tax : Int32;
  end;

  tGEItemArray = Array of tGEItem;

(*
type tGEItemFancy
~~~~~~~~~~~~~~~~~~
.. pascal::
   tGEItemFancy = record(tGEItem)
     revenue : Int32; // Total revenue for all trades of this item
     spend : Int32; // Total spent for all trades of this item
     quantity : Int32; // Total amount traded for all trades of this item
     time : Int32; // Total time for all trades of this item
     profitPer : Int32; // Profit per hour as calculated
   end;
This is an extended item array for sorting by profit/hr
*)

type tGEItemFancy = record(tGEItem)
  revenue, spend, quantity, time, profitPer : Double;
end;

  tGEItemFancyArray = Array of tGEItemFancy;

(*
type tGESlot
~~~~~~~~~~~~~~~~~~
.. pascal::
   tGESlot = record
     lastProgress : Int32; // Progress the last time we checked the offer
   end;
Keeps track of the information for each Slot. Each slot has an offer and each offer
has an item.
*)

type tGESlot = record(TRSGEOfferStatus)
  lastProgress : Int32;
end;

  tGESlotArray = Array of tGESlot;

(*
type tInventorySlot
~~~~~~~~~~~~~~~~~~
.. pascal::
   tInventorySlot = record
     name : String; // Name of the item in inventory
     count : Int32; // Stack count
     exists: Boolean; // Is there an item in the slot
   end;
Keeps track of inventory information
*)

type tInventorySlot = record
   name : String; // Name of the item in inventory
   count : Int32; // Stack count
   exists: Boolean; // Is there an item in the slot
end;

  tInventoryArray = array of tInventorySlot;

(*
type tGEOffer
~~~~~~~~~~~~~~~~~~
.. pascal::
   tGEOffer = record
     globalTrade : Int32; // Tracks the trade value to match with the database
     purchased : Int32; // The amount we have purchased on this offer
     toTrade : Int32; // The total amount that we plan on purchasing this offer
     spent : Int32; // The amount of gp spent on the offer
     revenue : Int32; // the revenue made from the offer
     startTime : Int32; // SystemTime that the offer was started
     lastUpdate : Int32; // SystemTime that the progress was updated
     waitTime : Int32; // How long to wait before making a price check on the offer
     slotNumber : Int32; // The number for internal GE functions (index 0 is slot 1)
     buyOverride : Boolean; // Used for overriding script logic if we need to stop buying a partial trade
     abandoning : Boolean; // Tracks if the item can't be reasonably sold and needs to be abandoned for 1gp
     collected : Boolean; // Tracks if the item has been collected out of the slot
     histUpdated : Boolean; // Tracks if the history has been updated for the offer
     status : String; // The offer status. "buying" or "selling" only
     previousTrades : tTradeRecordArray; // Tracks partial trades for ensuring we don't go over the trade limit
     item : tGEItem; // The item we are trading
   end;
Tracks all the information for a given offer.
*)

type tGEOffer = record
  globalID, purchased, toTrade, spent, revenue, waitTime, slotNumber : Int32;
  startTime, lastUpdate : Int64;
  buyOverride, abandoning, collected, histUpdated : Boolean;
  status : String;
  item : tGEItem;
  slot : tGESlot;
end;

  tGEOfferArray = array of tGEOffer;

(*
type tGEHistory
~~~~~~~~~~~~~~~~~~
.. pascal::
   tGEHistory = record()
     isUsed : Boolean; // If the history slot has been used for an offer update yet
   end;
Tracks the information for trade history
*)

type tGEHistory = record(TRSGEHistoryItem)
  isUsed, firstPass : Boolean;
end;

  tGEHistoryArray = Array of tGEHistory;

(*
type tTradeRecord
~~~~~~~~~~~~~~~~~~
.. pascal::
   tTradeRecord = record
     tradeFinished : Int32; // The time the trade finished
     amount : Int32; // The amount of items that we traded at that time
   end;
Used to track the partial trades in a current offer. In the case of a completed
trade, amount is used to track the itemID instead of partial amount.
*)

type tTradeRecord = record(TGEHistory)
  timeStampUnix : Int64;
  timeStamp, itemName : String;
  itemID, offerID : Int32;
end;

  tTradeRecordArray = Array of tTradeRecord;

(*
type tScript
~~~~~~~~~~~~~~~~~~
.. pascal::
   tScript = record
     offers      : tGEOfferArray // The offers this script is trading
     history     : tGEHistoryArray; // The GE history for this script
     itemQ       : tGEItemArray; // Array of the items waiting to price check
     recentItems : tTradeRecordArray; // The recently traded items for this script
                                      // Used to prevent re-trading of items
                                      // where we've already traded to limit.
   end;
Tracks the information for this instance of the script
*)

type
  eDebugType = (
      NONE, LIGHT, DEV, FATAL
    );

  tScript = record

    version : String;
    debugLevel : eDebugType;

    // Insert progress report variables here
    completeOffers : tGEOfferArray;
    tradeLog : tTradeRecordArray;
    totalRevenue : Int32;
    totalSpend : Int32;
    starterCash : Int32;


    // Active Script Variables
    offers : tGEOfferArray;
    history : tGEHistoryArray;
    itemQ : TGEItemArray;
    itemMap : tJSONArray;
    itemList : tStringArray;
    itemBlackList : tStringArray;
    playerCash : Int32;
    coolDown : Boolean;
    globalID : Int32;
    inv : tInventoryArray;

    // SRL Related Variables
    RSW : TRSWalker;
  end;

// Running Variable
var
  bot : tScript;
  logTimer : tCountDown;

begin
end;

