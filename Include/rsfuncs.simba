function TRSLogin.AtLobby() : Boolean;
begin
  result := Self.FindText('CLICK HERE TO PLAY');
end;

function TRSLogin.HandleLobby() : Boolean;
begin
  if self.AtLobby() then
  begin
    Self.DebugLn('At lobby screen');
    exit(Self.EnterGame());
  end;
end;

function TRSInventory.CountItems(Items: TRSItemArray): Int32;
var slots : tIntegerArray;
begin
  self.FindItems(Items, Slots);
  result := Length(Slots);
end;

function TRSInventory.CountItems(Item: TRSItem): Int32; Overload;
begin
  if (System.ItemFinder.Database.Columns.Find('noted ' + Item) > -1) then
    result := self.CountItems([Item, 'noted ' + Item])
  else
    result := self.CountItem(Item);
end;

function TRSInventory.isSlotNoted(slot : Int32) : Boolean;
begin
  if not self.IsSlotUsed(slot) then exit(False);

  result := SRL.CountColor(CTS2(9549765, 9, 0.04, 0.94), self.GetSlotBox(slot)) > 50;
end;

function TRSInventory.GetUptext(slot : Int32) : String;
begin
  if not self.IsSlotUsed(slot) then exit();

  Mouse.Move(self.GetSlotBox(slot));
  wait(400,600);
  waitUntil(MainScreen.GetUpText() <> '', 150, 2000);

  result := MainScreen.GetUpText();
end;

function TRSInventory.GetUptext(slot : Int32; rightClick: Boolean) : String; overload;
var opts : TRSChooseOption_OptionArray;
begin
  if not self.IsSlotUsed(slot) then exit();

  Mouse.Click(self.GetSlotBox(slot), MOUSE_RIGHT);
  wait(400,600);
  waitUntil(chooseOption.isOpen, 150, 2000);

  opts := ChooseOption.GetOptions();

  ChooseOption.Close();
  if length(opts) = 0 then exit();

  result := opts[0].Text;
end;

// Get the next empty slot
function TRSInventory.nextEmptySlot() : Int32;
var
  i : Integer;
begin
  for i := 0 to 27 do
    if not self.IsSlotUsed(i) then
      exit(i);

  // Fail to -1
  exit(-1);
end;

function TRSGrandExchange.SearchHistory(search : tGEHistory; history: tGEHistoryArray = []) : Int32; overload;
var
  i : Int32;
begin
  if length(history) = 0 then history := CastHist(self.GetHistory(30));

  for i := 0 to high(history) do
    if search.equals(history[i]) then
    begin
      print('SearchHistory: Found ' + search.Item + ' at history slot ' + toStr(result), eDebugType.DEV);

      exit(i);
    end;

  result := -1; // -1 if no match is found
  print('SearchHistory: Could not find ' + search.Item, eDebugType.DEV);
end;

