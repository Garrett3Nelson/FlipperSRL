procedure tScript.pullMapping(userAgent: String = 'Simba Client - Mapping Information');
var
  url, resString : String;
  theClient : Int32;
  JSONMap : tJSONArray;
  //t : Int64;
begin
  url := 'https://prices.runescape.wiki/api/v1/osrs/mapping';

  try
    theClient := InitializeHTTPClient(False);
    SetHTTPUserAgent(theClient, userAgent);

    //t := getSystemTime();
    resString := GetHTTPPage(theClient, url);
    //writeln('Getting HTTP Page took ', getSystemTime() - t, 'ms');

    //t := getSystemTime();
    JSONMap.Init(resString);
    //writeln('Creating JSONMap took ', getSystemTime() - t, 'ms');

    //t := getSystemTime();
    self.ItemMap := JSONMap.CreateItemMapArray();
    //writeln('Creating ItemMap took ', getSystemTime() - t, 'ms');
    JSONMap.Free();
  except
    // Add debug of error
    print("Failed to get item data, cannot load items", eDebugType.FATAL);
  finally
    FreeHTTPClient(theClient);
  end;
end;

function getHourlyPrices(userAgent: String = 'Simba Client - Market Information') : tJSONObject;
var
  theClient : Int32;
  url, response : String;
begin
  url := 'https://prices.runescape.wiki/api/v1/osrs/1h';

  try
    theClient := InitializeHTTPClient(False);
    SetHTTPUserAgent(theClient, userAgent);

    response := GetHTTPPage(theClient, url);

    result.Init(response);
    result := result.getJSONObject('data');
  except
    writeln('Failed to get price information from RSWiki');
    terminateScript;
  finally
    FreeHTTPClient(theClient);
  end;
end;

procedure tGEOfferArray.pullMarkets(userAgent: String = 'Simba Client - Market Information');
var
  i, theClient : Int32;
  url, response : String;
  resJSON : tJSONObject;
begin
  url := 'https://api.weirdgloop.org/exchange/history/osrs/latest?id=';
  for i := 0 to high(self) do
  begin
    if self[i].item.itemID = 0 then continue;
    url += toStr(self[i].item.itemID) + '|';
  end;
  url := url.StripR('|');

  try
    theClient := InitializeHTTPClient(False);
    SetHTTPUserAgent(theClient, userAgent);

    response := GetHTTPPage(theClient, url);

    resJSON.Init(response);
  except
  finally
    FreeHTTPClient(theClient);
  end;

  for i := 0 to high(self) do
  begin
    if self[i].item.itemID = 0 then continue;
    self[i].item.market := resJSON.getJSONObject(toStr(self[i].item.itemID)).getInt('price');
  end;
end;

procedure tGEItemArray.pullMarkets(userAgent: String = 'Simba Client - Market Information'); overload;
var i : Int32;
tempOffers : tGEOfferArray;
begin
  setLength(tempOffers, length(self));

  for i := 0 to high(self) do
    tempOffers[i].item := self[i];

  tempOffers.pullMarkets(userAgent);

  for i := 0 to high(self) do
    self[i] := tempOffers[i].item;
end;

function tGEItem.parseMap(itemMap : tItemMapArray) : boolean;
var
  item : tItemMap;
begin
  if self.name = '' then exit(True);  // No item to set up
  if self.itemID > 0 then exit(True); // Already set up

  for item in itemMap do
  begin
    if self.name = item.Name then
    begin
      self.itemID := item.ID;
      self.limit := item.Limit;
      exit(True);
    end;
  end;
end;

function tGEItemArray.parseMap(itemMap : tItemMapArray): boolean; overload;
var i : Int32;
begin
  result := True;

  for i := 0 to high(self) do
    if not self[i].parseMap(itemMap) then result := False;
    // Return false if not all items were parsed, but don't exit until trying all items
    // Not sure how to handle yet but I don't want it killing the script yet either
end;

function tGEOfferArray.parseMap(itemMap : tItemMapArray) : boolean; overload;
var
  i : Int32;
begin
  result := True;
  for i := 0 to high(self) do
  begin
    if self[i].item.name = '' then continue;  // No item to set up
    if self[i].item.itemID > 0 then continue; // Already set up

    if not self[i].item.parseMap(itemMap) then result := False;
  end;
end;

function tScript.parseMap() : boolean; overload;
begin
  result := self.offers.parseMap(self.itemMap);
end;

